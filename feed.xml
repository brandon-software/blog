<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://code-sage.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://code-sage.com/blog/" rel="alternate" type="text/html" /><updated>2024-02-27T18:46:21+00:00</updated><id>https://code-sage.com/blog/feed.xml</id><title type="html">Code-Sage</title><subtitle>A Software Engineer&apos;s Blog
</subtitle><entry><title type="html">NET Core Application Modernization - Dependency Upgrade (3.1 to 8.0)</title><link href="https://code-sage.com/blog/application-modernization/2024/02/24/NET-Core-App-Modernization.html" rel="alternate" type="text/html" title="NET Core Application Modernization - Dependency Upgrade (3.1 to 8.0)" /><published>2024-02-24T20:16:27+00:00</published><updated>2024-02-24T20:16:27+00:00</updated><id>https://code-sage.com/blog/application-modernization/2024/02/24/NET-Core-App-Modernization</id><content type="html" xml:base="https://code-sage.com/blog/application-modernization/2024/02/24/NET-Core-App-Modernization.html"><![CDATA[<p><img src="/blog/public/image/ad-puzzle-modernization.jpg" alt="NET Core" class="center-image" /></p>

<hr />

<h2 id="objective">Objective</h2>

<p>Modernize legacy NET Application for maintainability and new feature enhancements.</p>

<h2 id="technical-goalsoverview">Technical Goals/Overview</h2>

<p>Minimal changes to update application components (dependencies, code base, and database) to upgrade to latest NET Core LTS (8.0 from NET Core 3.1).</p>

<h2 id="summary-technical-implementation">Summary: Technical Implementation</h2>

<p>1) Update dependencies (net core 3.1 to 8.0).  This includes dependency changes to:</p>
<ul>
  <li>.csproj (dotnet upgrade tool)</li>
  <li>global.json</li>
  <li>Dockerfile</li>
</ul>

<p>2) Update database version (MySQL 5.7 to 8.0)</p>
<ul>
  <li>.csproj (update MySQL dependencies)</li>
  <li>code changes to correctly initialize mysql connection</li>
</ul>

<p>3) Troubleshoot and fix build errors and runtime failures</p>
<ul>
  <li>update needed code, environment, and configuration settings for updated versions of MySQL and .NET Core</li>
  <li>(dev env enhancement) support for local development using HTTPS</li>
</ul>

<p>Overall, the technical implementation focused on successfully navigating and trouble shooting issues (build and runtime) encountered to continue development and long term support of NET Core web application.</p>]]></content><author><name>Brandon DSouza</name></author><category term="Application-Modernization" /><category term="vscode" /><category term="git" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://code-sage.com/blog/public/image/ad-puzzle-modernization.jpg" /><media:content medium="image" url="https://code-sage.com/blog/public/image/ad-puzzle-modernization.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SoapBox: Schedule and prioritize Dependency Maintenance</title><link href="https://code-sage.com/blog/devops/2024/01/27/Soapbox-Schdule-and-Prioritize-Dependency-Mantainance.html" rel="alternate" type="text/html" title="SoapBox: Schedule and prioritize Dependency Maintenance" /><published>2024-01-27T20:16:27+00:00</published><updated>2024-01-27T20:16:27+00:00</updated><id>https://code-sage.com/blog/devops/2024/01/27/Soapbox-Schdule-and-Prioritize-Dependency-Mantainance</id><content type="html" xml:base="https://code-sage.com/blog/devops/2024/01/27/Soapbox-Schdule-and-Prioritize-Dependency-Mantainance.html"><![CDATA[<p><img src="/blog/public/image/sp-machine-belt-gears-above.jpg" alt="Dependency Maintenance" class="center-image" /></p>

<hr />

<p>Regular and proactive dependency maintenance is a must in keeping a software project secure, up-to-date, and well-aligned with evolving requirements and standards.  Updates should be prioritized according to urgency of potential impact to a project.</p>

<h2 id="urgent-dependency-maintenance-to-be-completed-asap">Urgent Dependency Maintenance to be completed ASAP</h2>

<ul>
  <li>Security Vulnerabilities: Addressing security vulnerabilities should always be the highest priority to protect your software from potential threats.</li>
  <li>Bug Fixes: Critical bugs affecting the functionality or stability of your software.</li>
</ul>

<h2 id="typical-dependency-maintenance-based-on-specifics-of-project-priorities">Typical Dependency Maintenance based on specifics of project priorities</h2>

<ul>
  <li>Feature Requirements: updating dependencies to facilitate new project feature requirements.</li>
  <li>Policy or Compliance Changes: If there are changes in organizational policies or industry compliance standards that impact your dependencies, addressing these changes is important for maintaining compliance.</li>
  <li>End-of-Life or Deprecation: Dependencies that have reached their end-of-life or are deprecated should be prioritized to avoid using outdated or unsupported components.</li>
  <li>Typical dependency revisions:  updating dependencies addressing compatibility issues, non-critical bug fixes, performance improvements, ensures that your software continues to work seamlessly and is ready to move forward.</li>
</ul>

<h2 id="lts-dependency-maintenance-based-on-specifics-of-project-priorities">LTS Dependency Maintenance based on specifics of project priorities</h2>

<ul>
  <li>Framework or Language Updates: Addressing updates to the underlying programming language or framework can be important for long-term compatibility</li>
  <li>New Platform Support: If your project needs to be deployed on a new platform, updating dependencies for compatibility with that platform</li>
</ul>

<p>Proactive maintenance of dependencies is a strategic imperative. It not only mitigates risks associated with security and performance but also positions the software for sustained relevance and competitiveness in the dynamic realm of software development. Regularly assessing and updating dependencies should be a fundamental aspect of any software maintenance strategy, ensuring a resilient and forward-looking software ecosystem.</p>]]></content><author><name>Brandon DSouza</name></author><category term="DevOps" /><category term="vscode" /><category term="git" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://code-sage.com/blog/public/image/sp-machine-belt-gears-above.jpg" /><media:content medium="image" url="https://code-sage.com/blog/public/image/sp-machine-belt-gears-above.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Custom Dev Ops Tool - Break fix</title><link href="https://code-sage.com/blog/devops/2023/12/17/Custom-Dev-Ops-Tool-Break-fix.html" rel="alternate" type="text/html" title="Custom Dev Ops Tool - Break fix" /><published>2023-12-17T20:16:27+00:00</published><updated>2023-12-17T20:16:27+00:00</updated><id>https://code-sage.com/blog/devops/2023/12/17/Custom-Dev-Ops-Tool-Break-fix</id><content type="html" xml:base="https://code-sage.com/blog/devops/2023/12/17/Custom-Dev-Ops-Tool-Break-fix.html"><![CDATA[<p><img src="/blog/public/image/sp-puzzle-piece-missing.jpg" alt="Dev Ops" class="center-image" /></p>

<hr />

<h2 id="objective">Objective</h2>

<p>Fix a break to custom Dev Ops Tool which clones Dev, Test, etc. environments from a production system (db, web server, software framework and components).</p>

<h2 id="technical-goalsoverview">Technical Goals/Overview</h2>

<p>Dev Ops tool has functioned for years and facilitated CI/CD of E-Commerce system.  Recently, the custom tool fails to provide a working dev/test environment from production system.  Identify and resolve issue.</p>

<h2 id="summary-technical-implementation">Summary: Technical Implementation</h2>

<ol>
  <li>Identify likely causes of issue
    <ul>
      <li>Consider potential dependency changes in production vs cloned environments.</li>
      <li>Cloned environment uses ‘latest’ dependencies.</li>
      <li>Cause appears to be a ‘new’ change in production system/dependencies.</li>
      <li>Issue identified as ‘new’ serialization of server configuration in db not handled during the cloning process.</li>
    </ul>
  </li>
  <li>Resolve unhandled serialization of server configuration issue.
    <ul>
      <li>Identify solution from possible fixes.</li>
      <li>Implement solution and verify custom Dev Ops tool is working correctly.</li>
    </ul>
  </li>
</ol>

<p>Overall, the technical implementation focused on successfully navigating and trouble shooting ‘broken’ custom Dev Ops tool by logically investigating where ‘breaking changes’ were likely to be introduced and eliminating potential culprits i.e.  (db, web server, software framework and components) until resolved.</p>]]></content><author><name>Brandon DSouza</name></author><category term="DevOps" /><category term="html" /><category term="css" /><category term="vscode" /><category term="git" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://code-sage.com/blog/public/image/sp-puzzle-piece-missing.jpg" /><media:content medium="image" url="https://code-sage.com/blog/public/image/sp-puzzle-piece-missing.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Blazor vs Angular front end considerations for .NET stack</title><link href="https://code-sage.com/blog/net/2023/11/13/Blazor-vs-Angular-front-end-considerations-for-NET-stack.html" rel="alternate" type="text/html" title="Blazor vs Angular front end considerations for .NET stack" /><published>2023-11-13T15:16:27+00:00</published><updated>2023-11-13T15:16:27+00:00</updated><id>https://code-sage.com/blog/net/2023/11/13/Blazor-vs-Angular-front-end-considerations-for-NET-stack</id><content type="html" xml:base="https://code-sage.com/blog/net/2023/11/13/Blazor-vs-Angular-front-end-considerations-for-NET-stack.html"><![CDATA[<p><img src="/blog/public/image/ad-puzzle.jpg" alt="Blazor" class="center-image" /></p>

<hr />

<p>A primary benefit of NET Blazor development is leveraging existing .NET knowledge and skills for web front end, windows, and mobile app development.</p>

<p>A popular tech stack for enterprises who have committed to Microsoft Windows as their development platform of choice is the use of .NET ASP Framework/core along with Angular as the front end for application development.  It may seem like a no-brainer to choose Blazor over Angular when choosing frontend development however it is important to note there are some significant differences beyond obvious language and tooling aspects.</p>

<ol>
  <li>
    <p><strong>Runtime:</strong> Angular applications run directly in the JavaScript engine of the browser. JavaScript is a dynamic, interpreted language, and all modern browsers have a built-in JavaScript engine to execute it. When an Angular application runs, the Angular framework, along with your application code, is downloaded and executed in the browser’s JavaScript engine.</p>

    <p>On the other hand, Blazor WebAssembly apps run in a WebAssembly-based .NET runtime. WebAssembly (often abbreviated as wasm) is a binary instruction format for a stack-based virtual machine. It’s designed as a portable target for the compilation of high-level languages like C, C++, and Rust, enabling deployment on the web for client and server applications. When a Blazor WebAssembly application runs, the .NET runtime, the Blazor framework, and your application code are downloaded and executed in the WebAssembly runtime in the browser.</p>
  </li>
  <li>
    <p><strong>Interoperability:</strong> Angular has direct access to browser APIs via JavaScript. This means you can use any browser API directly from your Angular code because it’s all JavaScript. You can manipulate the DOM, use the Fetch API for HTTP requests, use WebSockets, and more, all directly from your Angular code.</p>

    <p>Blazor WebAssembly, on the other hand, needs to use JavaScript interop to access browser APIs not abstracted by .NET. While .NET provides many abstractions for things like HTTP requests (HttpClient) and timers (System.Timers.Timer), there are many browser APIs that are not directly available in .NET. To use these APIs, Blazor provides a way to interoperate with JavaScript. You can write JavaScript code and call it from your C# code, and vice versa. This allows you to do anything you could do in a JavaScript application, but it does add a layer of complexity compared to Angular’s direct access to browser APIs.</p>
  </li>
</ol>

<p>Other notable considerations, on the down side, hot-reloading is not perfect and results in some friction.  Overall, there are many wins as .NET Blazor has a variety of configurations options from server, streaming, client and even auto rendering options.  This allows for considerable flexibility in web browser deployment.  This flexibility combined with component re-use across MAUI (IOS/Android/Windows apps) feels like you are getting a lot for free.</p>

<p>If, however, your enterprise has made significant investments in Javascript development or are heavily dependent on 3rd party Javascript components, be aware that there is also friction in managing the Javascript interop with CSharp.</p>

<p>In conclusion,  despite the friction and commitment to .NET ecosystem,  Blazor development has significant potential for reducing development costs, increasing component re-use, and is quite certainly a strategic choice for enterprises who are already committed to .NET ecosystem.  Additionally, with the release of .NET 8, Blazor has reached a maturity that is worthy of consideration for conservative Enterprises who prefer a more proven technology stack.</p>]]></content><author><name>Brandon DSouza</name></author><category term="NET" /><category term="html" /><category term="css" /><category term="vscode" /><category term="git" /><category term="ASP NET" /><category term="MAUI" /><category term="Blazor" /><category term="Angular" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://code-sage.com/blog/public/image/ad-puzzle.jpg" /><media:content medium="image" url="https://code-sage.com/blog/public/image/ad-puzzle.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">CI/CD of Python Web App with GitHub Actions</title><link href="https://code-sage.com/blog/2023/09/22/CI-CD-of-Python-Web-App-With-GitHub-Actions.html" rel="alternate" type="text/html" title="CI/CD of Python Web App with GitHub Actions" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>https://code-sage.com/blog/2023/09/22/CI-CD-of-Python-Web-App-With-GitHub-Actions</id><content type="html" xml:base="https://code-sage.com/blog/2023/09/22/CI-CD-of-Python-Web-App-With-GitHub-Actions.html"><![CDATA[<p><img src="/blog/public/image/sp-manufacturing-packaging.jpg" alt="GitHub Action" class="center-image" /></p>

<hr />

<h2 id="objective">Objective</h2>

<p>Enhance web application quality and speed up development iterations.</p>

<h2 id="technical-goalsoverview">Technical Goals/Overview</h2>

<p>Automate build, testing, and deployment of Python web application using GitHub Actions.</p>

<h2 id="summary-technical-implementation">Summary: Technical Implementation</h2>

<ol>
  <li>Create GitHub Actions Workflow to
    <ul>
      <li>trigger job upon check in to branch</li>
      <li>checkout branch</li>
      <li>install python</li>
      <li>install app dependencies (pip)</li>
      <li>install test dependencies (pytest, playwright, browser)</li>
      <li>run tests</li>
      <li>merge to production branch (if tests successful)</li>
    </ul>
  </li>
  <li>Test and verify GitHub Actions Workflow is working as expected</li>
</ol>

<hr />]]></content><author><name>Brandon DSouza</name></author><category term="vscode" /><category term="github actions" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://code-sage.com/blog/public/image/sp-manufacturing-packaging.jpg" /><media:content medium="image" url="https://code-sage.com/blog/public/image/sp-manufacturing-packaging.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Soapbox: The Generative AI Conundrum: How It Shapes Code Quality and Developers’ Trajectories</title><link href="https://code-sage.com/blog/2023/09/04/Soapbox-The-Generative-AI-Conundrum.html" rel="alternate" type="text/html" title="Soapbox: The Generative AI Conundrum: How It Shapes Code Quality and Developers’ Trajectories" /><published>2023-09-04T00:00:00+00:00</published><updated>2023-09-04T00:00:00+00:00</updated><id>https://code-sage.com/blog/2023/09/04/Soapbox-The-Generative-AI-Conundrum</id><content type="html" xml:base="https://code-sage.com/blog/2023/09/04/Soapbox-The-Generative-AI-Conundrum.html"><![CDATA[<p><img src="/blog/public/image/sp-generative-ai-human.jpg" alt="AI Conundrum" class="center-image" /></p>

<hr />

<p>In the ever-evolving landscape of software development, Generative Artificial Intelligence (AI) emerges as both a boon and a challenge. As AI increasingly influences code quality and developers’ roles, understanding its dual impact on professionals of varying experience levels becomes pivotal.</p>

<p>Let’s explore how AI can be both a guiding light and a potential pitfall, particularly in the context of developers’ diverse expertise.</p>

<h2 id="the-double-edged-sword-of-ai">The Double-Edged Sword of AI</h2>

<h3 id="positive-impacts">Positive Impacts</h3>

<p>Using AI, I have found projects that used to take months now take weeks, features that took weeks now take days, etc.  I find AI particularly useful for the following tasks:</p>

<ul>
  <li>Enhanced efficiency: AI-driven tools serve as a great primer for developers, helping them write code faster. Feedback is instant, and suggestions are contextually relevant, reducing the time spent on manual research and coding.</li>
  <li>Debugging and testing: AI-powered tools can identify bugs and vulnerabilities, improving code quality and reducing the chances of errors escaping into production.</li>
  <li>Assisted learning: For developers, AI can offer instant feedback, acting as a knowledgeable mentor that guides them through best practices.</li>
</ul>

<p>There is a lot to be said about the efficiency of AI and how it can help us get to the next level of development.  Not just code that works but code that is architected to be efficient, secure, and maintainable.  With our guidance, AI can help us efficiently produce good quality code and reduce technical debt.</p>

<h3 id="potential-hazards-and-pitfalls">Potential hazards and pitfalls</h3>

<p>I find the lack of understanding of underlying principles can result in the same patterns that plague the pre-AI development.  This failure to understand the underlying principles can result in potentially serious bottlenecks.  That is, in using AI with technologies I am not familiar with I have found myself spending more time in frustration trying to “resolve” the issue with AI instead of “thinking through and understanding” and resolving the problem the AI had not “encountered” in its training.  Additionally, we should all be aware of the following AI pitfalls:</p>

<ul>
  <li>Lack of available training data: AI tools require large amounts of training data to function effectively. However, this data may not always be available, particularly for niche use cases or new technologies or versions of software components.</li>
  <li>Dependency concerns: Over reliance on AI tools can lead to a decline in fundamental coding skills, creating a generation of developers heavily reliant on automation.</li>
  <li>Homogenization of code: AI tools may favor certain coding patterns, potentially stifling creativity and diversity in code bases.</li>
  <li>Hallucinations: AI tools may generate code that is syntactically correct but semantically incorrect. This can lead to bugs and vulnerabilities in production code.</li>
</ul>

<p>Overall, AI can provide answers but what is the intent of the questions?  With the help of AI, we can still generate working but inefficient code with costly technical debt.</p>

<p>With our (AI and humans) collective faults, we can certainly block ourselves from growth and allow AI to lead us down the “meandering path of the moment” vs the “strategic path of born of experience”.</p>

<h2 id="harnessing-experience">Harnessing Experience</h2>

<h3 id="experienced-developers">Experienced Developers</h3>

<p>Having traversed the coding landscape, experienced developers can leverage AI for strategic tasks. By identifying where automation enhances efficiency and where personal experience adds value.  Experienced developers will have the ability to readily overcome challenges faced by less experienced developers and AI.</p>

<h3 id="less-experienced-developers">Less Experienced Developers</h3>

<p>For novice developers, AI serves as a guiding beacon. However, it’s crucial they don’t treat AI as a crutch. Instead, they should approach it as an enabler that complements learning. Engaging with AI tools while striving to understand the principles they automate will create a solid foundation for growth.</p>

<h3 id="the-path-to-leveling-up">The Path to “Leveling Up”</h3>

<ul>
  <li>Embrace continuous learning: Both experienced and less experienced developers should prioritize continuous learning. This includes understanding how AI tools work, recognizing their limitations, and enhancing core coding skills.</li>
  <li>Balance automation and manual coding: Rather than entirely outsourcing tasks to AI, developers should strategically choose where automation benefits them and where hands-on coding sharpens their skills.  Developers should always be able to read, write, and understand code.</li>
  <li>Collaborate and seek guidance: Engaging with experienced developers can provide valuable insights. Their guidance helps less experienced developers make informed decisions about AI tool usage.</li>
  <li>Experiment and innovate: Use AI as a launchpad for innovation. Experiment with creative uses of AI-driven suggestions to create high-quality code.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>The AI surge in the realm of code quality is both transformative and challenging. For developers, whether seasoned or new, it’s an opportunity to tread thoughtfully. By harnessing AI’s strengths and mitigating its potential pitfalls, professionals can ensure a harmonious coexistence between technology and craftsmanship.</p>

<p>It is important to understand AI is a tool to help the developer.  The developer is responsible for many aspects of the code including quality, efficiency, maintainability, security, etc.  AI is a tool to assist the developer with these aspects, not replace the developer.</p>

<p>Will we use this to our advantage or disadvantage?  Discipline in “software engineering” fundamentals is still required.  Are we asking AI to assist us? Or are we asking AI to do the work for us?</p>

<hr />]]></content><author><name>Brandon DSouza</name></author><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://code-sage.com/blog/public/image/sp-generative-ai-human.jpg" /><media:content medium="image" url="https://code-sage.com/blog/public/image/sp-generative-ai-human.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Automated Web App Testing with PlayWright</title><link href="https://code-sage.com/blog/2023/08/16/Automated-Web-App-Testing-with-Playwright.html" rel="alternate" type="text/html" title="Automated Web App Testing with PlayWright" /><published>2023-08-16T00:00:00+00:00</published><updated>2023-08-16T00:00:00+00:00</updated><id>https://code-sage.com/blog/2023/08/16/Automated-Web-App-Testing-with-Playwright</id><content type="html" xml:base="https://code-sage.com/blog/2023/08/16/Automated-Web-App-Testing-with-Playwright.html"><![CDATA[<p><img src="/blog/public/image/sp-playwright.jpg" alt="Testing" class="center-image" /></p>

<hr />

<h2 id="objective">Objective</h2>

<p>Reduce manual testing to increase rate of responsiveness to business change request and reduce risk of regression.</p>

<h2 id="technical-goalsoverview">Technical Goals/Overview</h2>

<p>Automate web app testing.  Additional considerations: Test iteration development cycles should be minimal, that is, ‘reduce thrashing’ and ‘quick turn around’ by assisted automated code generation.  Testing should support headless testing and be able to run in a CI/CD pipeline.</p>

<h2 id="summary-technical-implementation">Summary: Technical Implementation</h2>

<ol>
  <li>Project Setup
    <ul>
      <li>Python Environment</li>
      <li>Add Pytest and PlayWright Packages</li>
    </ul>
  </li>
  <li>Develop Tests
    <ul>
      <li>Identify ‘non-brittle’ test cases and scenarios.</li>
      <li>Identify specific and unique selectors with a consideration of minimizing change.  That is, selectors should be stable and not change with each release.</li>
      <li>Create tests and confirm tests pass and fail as expected.</li>
    </ul>
  </li>
</ol>

<p>Overall, automated testing for a web app reduces development effort.  A substantial advantage can be achieved when you avoid manual testing, brittle tests, and can develop tests quickly. Additionally, we’re making sure these tests can be done without a visible browser and can be run in a pipeline that helps us keep our development process smooth.</p>

<hr />]]></content><author><name>Brandon DSouza</name></author><category term="vscode" /><category term="git" /><category term="python" /><category term="pytest" /><category term="playwright" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Soapbox: Why Refactor?</title><link href="https://code-sage.com/blog/2023/08/11/Soapbox-Why-Refactor.html" rel="alternate" type="text/html" title="Soapbox: Why Refactor?" /><published>2023-08-11T00:00:00+00:00</published><updated>2023-08-11T00:00:00+00:00</updated><id>https://code-sage.com/blog/2023/08/11/Soapbox-Why-Refactor</id><content type="html" xml:base="https://code-sage.com/blog/2023/08/11/Soapbox-Why-Refactor.html"><![CDATA[<p><img src="/blog/public/image/ad-puzzle-refactor.jpg" alt="Refactor" class="center-image" /></p>

<hr />

<p>While it is important to deliver features and meet deadlines,  it is also important to consider the long term maintainability of the software.  Refactoring is an essential  part of software development process and is a process that should be done continuously.</p>

<p>Refactoring should include the following tasks (i.e elimination of code smells):</p>

<ul>
  <li>Identify and remove the following:
    <ul>
      <li>dead code</li>
      <li>unused variables</li>
      <li>duplicated code</li>
      <li>overly complex code</li>
    </ul>
  </li>
  <li>Communicating with project maintainers (including your future self!) and other developers through improving the following:
    <ul>
      <li>naming of functions and variables</li>
      <li>code structure</li>
      <li>modularity</li>
      <li>potential reuse</li>
    </ul>
  </li>
</ul>

<p>In essence, refactoring is the process of improving the design of existing code without changing its external behavior. Knowledge and proficiency of automated testing, version control, IDE utilization, Clean Code and SOLID principles, CI/CD, etc. are critical to continuously implement refactoring.</p>

<p>A primary benefit of refactoring is a reduction of “technical debt”.   If a project has incorporated the ability to continuously refactor, delivering features faster and with less risk of regression is guaranteed.  A developer does not fear change and can confidently refactor code to improve the design of the software developed as well as enhance their ability to deliver new features faster.</p>

<hr />]]></content><author><name>Brandon DSouza</name></author><category term="vscode" /><category term="git" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Deployment and Updates with PowerShell (Business Sales Dashboard - Phase 3)</title><link href="https://code-sage.com/blog/2023/08/04/Dash-App-Deployment-with-Powershell.html" rel="alternate" type="text/html" title="Deployment and Updates with PowerShell (Business Sales Dashboard - Phase 3)" /><published>2023-08-04T00:00:00+00:00</published><updated>2023-08-04T00:00:00+00:00</updated><id>https://code-sage.com/blog/2023/08/04/Dash-App-Deployment-with-Powershell</id><content type="html" xml:base="https://code-sage.com/blog/2023/08/04/Dash-App-Deployment-with-Powershell.html"><![CDATA[<p><img src="/blog/public/image/deployment.jpeg" alt="Deployment" class="center-image rounded-image" /></p>

<hr />

<h2 id="objective">Objective</h2>

<p>Create an interactive dashboard that offers valuable business insights into product sales, manufacturing, and market data to allow for seamless exploration of key metrics, facilitating informed decision-making and enhancing understanding of the sales and manufacturing processes as well as market trends and opportunities.</p>

<p>Phase 3: Seamless Dashboard Deployment and Updates</p>

<h2 id="technical-goalsoverview">Technical Goals/Overview</h2>

<p>Develop automated method to update dashboard application in windows environment.</p>

<h2 id="summary-technical-implementation">Summary: Technical Implementation</h2>

<ol>
  <li>Deploy dashboard to client workstation. Create Power Shell Installation Script/Tool for managing dependencies allowing for
    <ul>
      <li>install</li>
      <li>upgrade</li>
      <li>uninstall</li>
      <li>display package versions</li>
      <li>create/remove dashboard app shortcut on desktop</li>
    </ul>
  </li>
  <li>Application Update and Start Script. Create Power Shell Script to
    <ul>
      <li>automate dashboard app updates</li>
      <li>start of flask Python app (dashboard).</li>
    </ul>
  </li>
</ol>

<hr />]]></content><author><name>Brandon DSouza</name></author><category term="vscode" /><category term="git" /><category term="python" /><category term="pandas" /><category term="numpy" /><category term="matplotlib" /><category term="seaborn" /><category term="data-science" /><category term="data-analysis" /><category term="data-visualization" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Data Science - Visualization with Python (Business Sales Dashboard - Phase 2)</title><link href="https://code-sage.com/blog/2023/07/31/Data-Science-Visualization-with-Python.html" rel="alternate" type="text/html" title="Data Science - Visualization with Python (Business Sales Dashboard - Phase 2)" /><published>2023-07-31T00:00:00+00:00</published><updated>2023-07-31T00:00:00+00:00</updated><id>https://code-sage.com/blog/2023/07/31/Data-Science-Visualization-with-Python</id><content type="html" xml:base="https://code-sage.com/blog/2023/07/31/Data-Science-Visualization-with-Python.html"><![CDATA[<p><img src="/blog/public/image/data-visualization.jpeg" alt="Data Visualization" class="center-image" /></p>

<hr />

<h2 id="objective">Objective</h2>

<p>Create an interactive dashboard that offers valuable business insights into product sales, manufacturing, and market data to allow for seamless exploration of key metrics, facilitating informed decision-making and enhancing understanding of the sales and manufacturing processes as well as market trends and opportunities.</p>

<p>Phase 2: Deliver Usable Interactive Dashboard for Business Data Visualization</p>

<h2 id="technical-goalsoverview">Technical Goals/Overview</h2>

<p>Understand customer needs and develop usable/interactive dashboard with minimal user interface friction.</p>

<h2 id="summary-technical-implementation">Summary: Technical Implementation</h2>

<ol>
  <li>Project Setup
    <ul>
      <li>Python Environment</li>
      <li>Jupyter Notebook</li>
      <li>Data Analysis and Visualization Packages</li>
    </ul>
  </li>
  <li>Data Visualization and Dashboard Development
    <ul>
      <li>Understand data and identify key variables/metrics for interactive dashboard.</li>
      <li>Prototype pivot table, charts and graphs for review.</li>
      <li>Identify friction points and opportunities for improvement.</li>
      <li>Create an interactive dashboard to allow for seamless exploration of product, manufacture and market data.
        <ul>
          <li>All Product Manufacturing, Sales, by Market By Period (Daily/Weekly/Quarter/Annually)</li>
          <li>Granular Product Manufacturing, Sales, by Market By Period (Daily/Weekly/Quarter/Annually)</li>
          <li>Sales trends with adjustable time frame window by product, category, and market (Daily/Weekly/Quarter/Annually).</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<hr />]]></content><author><name>Brandon DSouza</name></author><category term="vscode" /><category term="git" /><category term="python" /><category term="pandas" /><category term="numpy" /><category term="matplotlib" /><category term="seaborn" /><category term="scipy" /><category term="jupyter-notebook" /><category term="data-science" /><category term="data-analysis" /><category term="data-visualization" /><summary type="html"><![CDATA[]]></summary></entry></feed>